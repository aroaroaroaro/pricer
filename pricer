# Option Pricer GUI with Greeks and Interactive Inputs
import numpy as np
from scipy.stats import norm
import tkinter as tk
from tkinter import ttk
from tkcalendar import DateEntry
import matplotlib.pyplot as plt
from datetime import datetime

# Greeks calculation functions
def compute_greeks(spot, strike, t, r, sigma, d1, d2):
    N_prime = lambda x: np.exp(-x**2 / 2) / np.sqrt(2 * np.pi)
    delta_call = norm.cdf(d1)
    delta_put = delta_call - 1
    gamma = N_prime(d1) / (spot * sigma * np.sqrt(t))
    vega = spot * N_prime(d1) * np.sqrt(t) / 100
    theta_call = (-spot * N_prime(d1) * sigma / (2 * np.sqrt(t)) - r * strike * np.exp(-r * t) * norm.cdf(d2)) / 365
    theta_put = (-spot * N_prime(d1) * sigma / (2 * np.sqrt(t)) + r * strike * np.exp(-r * t) * norm.cdf(-d2)) / 365
    rho_call = strike * t * np.exp(-r * t) * norm.cdf(d2) / 100
    rho_put = -strike * t * np.exp(-r * t) * norm.cdf(-d2) / 100
    vanna = (vega / spot) * (1 - d1 / (sigma * np.sqrt(t)))
    charm_call = -N_prime(d1) * (2 * r * t - d2 * sigma * np.sqrt(t)) / (2 * t * sigma * np.sqrt(t)) / 365
    charm_put = -charm_call  # Simplified assumption

    return {
        'Delta (Call)': delta_call,
        'Delta (Put)': delta_put,
        'Gamma': gamma,
        'Theta (Call)': theta_call,
        'Theta (Put)': theta_put,
        'Rho (Call)': rho_call,
        'Rho (Put)': rho_put,
        'Vega': vega,
        'Vanna': vanna,
        'Charm (Call)': charm_call,
        'Charm (Put)': charm_put
    }

# Black-Scholes pricing
def black_scholes(spot, strike, r, sigma, t):
    d1 = (np.log(spot / strike) + (r + 0.5 * sigma ** 2) * t) / (sigma * np.sqrt(t))
    d2 = d1 - sigma * np.sqrt(t)
    call = spot * norm.cdf(d1) - strike * np.exp(-r * t) * norm.cdf(d2)
    put = strike * np.exp(-r * t) * norm.cdf(-d2) - spot * norm.cdf(-d1)
    return call, put, d1, d2

# Payoff graph
def plot_payoff_graph(spot, strike, call_price, put_price):
    x = np.arange(spot * 0.5, spot * 1.5, 1)
    long_call = np.maximum(x - strike, 0) - call_price
    long_put = np.maximum(strike - x, 0) - put_price

    plt.figure(figsize=(10, 5))
    plt.plot(x, long_call, label='Long Call', color='green')
    plt.plot(x, long_put, label='Long Put', color='blue')
    plt.axhline(0, color='black', linewidth=0.5)
    plt.title('Option Payoff')
    plt.xlabel('Spot Price')
    plt.ylabel('P&L')
    plt.legend()
    plt.grid(True)
    plt.show()

# Main GUI function
def launch_gui():
    def calculate():
        spot = spot_scale.get()
        strike = strike_scale.get()
        r = rate_scale.get() / 100
        sigma = vol_scale.get() / 100

        start = datetime.strptime(start_cal.get(), '%m/%d/%y')
        end = datetime.strptime(end_cal.get(), '%m/%d/%y')
        t = (end - start).days / 365.0

        call_price, put_price, d1, d2 = black_scholes(spot, strike, r, sigma, t)
        greeks = compute_greeks(spot, strike, t, r, sigma, d1, d2)

        result.set(f"Call Price: {call_price:.2f}, Put Price: {put_price:.2f}")
        greek_text = "\n".join([f"{k}: {v:.4f}" for k, v in greeks.items()])
        greeks_label.config(text=greek_text)
        plot_payoff_graph(spot, strike, call_price, put_price)

    root = tk.Tk()
    root.title("Vanilla Option Pricer & Greeks")

    tk.Label(root, text="Spot Price").grid(row=0, column=0)
    spot_scale = tk.Scale(root, from_=50, to=200, orient="horizontal")
    spot_scale.set(100)
    spot_scale.grid(row=0, column=1)

    tk.Label(root, text="Strike Price").grid(row=1, column=0)
    strike_scale = tk.Scale(root, from_=50, to=200, orient="horizontal")
    strike_scale.set(110)
    strike_scale.grid(row=1, column=1)

    tk.Label(root, text="Volatility (%)").grid(row=2, column=0)
    vol_scale = tk.Scale(root, from_=1, to=100, orient="horizontal")
    vol_scale.set(20)
    vol_scale.grid(row=2, column=1)

    tk.Label(root, text="Risk-Free Rate (%)").grid(row=3, column=0)
    rate_scale = tk.Scale(root, from_=0, to=10, resolution=0.1, orient="horizontal")
    rate_scale.set(2.5)
    rate_scale.grid(row=3, column=1)

    tk.Label(root, text="Purchase Date").grid(row=4, column=0)
    start_cal = DateEntry(root, width=12, background='darkblue', foreground='white', borderwidth=2)
    start_cal.grid(row=4, column=1)

    tk.Label(root, text="Maturity Date").grid(row=5, column=0)
    end_cal = DateEntry(root, width=12, background='darkblue', foreground='white', borderwidth=2)
    end_cal.grid(row=5, column=1)

    tk.Button(root, text="Calculate", command=calculate).grid(row=6, columnspan=2, pady=10)

    result = tk.StringVar()
    tk.Label(root, textvariable=result, font=("Arial", 12)).grid(row=7, columnspan=2)
    greeks_label = tk.Label(root, justify="left", font=("Courier", 10))
    greeks_label.grid(row=8, columnspan=2)

    root.mainloop()

if __name__ == '__main__':
    launch_gui()